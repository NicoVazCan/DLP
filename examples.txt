true$
let x = true in x$
if false then true else false$
0$
succ (succ (succ 0))$
3$
succ (pred 0)$
iszero (pred (succ (succ 0)))$
if iszero 3 then 0 else 1$
(*iszero true*)$
(*if 1 then true else false*)$
(*if iszero 3 then 0 else false*)$
let id = Lx:Nat.x in id 3$
let id_bool = L x:Bool. x in id_bool true$
let id_nat = L x:Nat. x in id_nat 5$
let x = 5 in let id_nat = L x:Nat. x in id_nat x$
(*
let fix =
  lambda f.(lambda x. f (lambda y. x x y))
    (lambda x. f (lambda y. x x y))
in
  let sumaux =
    lambda f. (lambda n. (lambda m.
      if (iszero n) then m
      else succ (f (pred n) m)))
  in
    let sum = fix sumaux
    in sum 21 34

let fix =
  lambda f.(lambda x. f (lambda y. x x y))
    (lambda x. f (lambda y. x x y))
in
  let sumaux =
    lambda f. (lambda n. (lambda m. 
      if (iszero n) then m
      else succ (f (pred n) m)))
  in
    let sum = fix sumaux
    in
      let prodaux = lambda f. (lambda n. (lambda m.
        if (iszero m) then 0
        else sum n (f n (pred m))))
      in
        let prod = fix prodaux in prod 12 5
*)$


(* Funciones recursivas *)$
prod = letrec aux:Nat->Nat->Nat->Nat = L n1:Nat. L n2:Nat. L n3:Nat.
  if iszero n2 then 0
  else
    if iszero n1 then (aux n3 (pred n2) n3)
    else
      succ (aux (pred n1) n2 n3)
in L n1:Nat. L n2:Nat.
  aux n1 n2 n1
$

sum = letrec aux:Nat->Nat->Nat = L n1:Nat. L n2:Nat.
  if iszero n1 then n2
  else
    succ (aux (pred n1) n2)
in aux
$

fib = letrec aux:Nat->Nat = L n:Nat.
  if iszero n then n
  else
    if iszero (pred n) then n
    else
      sum (aux (pred n)) (aux (pred (pred n)))
in aux
$

fact = letrec aux:Nat->Nat = L n:Nat.
  if iszero n then 1
  else
    prod n (aux (pred n))
in aux
$


(* Funciones con listas *)$

length = letrec aux:(List Nat)->(Nat->Nat) = L l:List Nat. L n:Nat.
  if isnil[Nat] l then n else aux (tail[Nat] l) (succ n)
in
  L l:List Nat. aux l 0
$

append = letrec aux:(List Nat)->((List Nat)->(List Nat)) =
  L la:List Nat. L lb:List Nat.
    if isnil[Nat] la
    then lb
    else cons[Nat] (head[Nat] la) (aux (tail[Nat] la) lb)
in
  aux
$

map = letrec aux:(Nat->Nat)->((List Nat)->(List Nat)) =
  L f:Nat->Nat. L l:List Nat.
    if isnil[Nat] l
    then l
    else cons[Nat] (f (head[Nat] l)) (aux f (tail[Nat] l))
in
  aux
$


(* Expresiones subtipado *)$

(* No se aplica subtipado a tuplas *)$
(*(L x:{}. 1) {1}       Falla *)$
(L x:{Nat}. 1) {1}   (* Bien *)$
(*(L x:{Nat}. 1) {1,2}  Falla *)$

(* Todos los registros son subtipo de top {} *)$
(L x:{}. 1) {}$
(L x:{}. 1) {x=1}$ 
(L x:{}. 1) {x=1,y=2}$

(* Pero no a la inversa *)$
(*(L x:{x=1}. x.x) {}*)$

(* Caso normal de subtipado con registros *)$
(L x:{x:Nat}. x.x) {x=1,y=2}$
(L x:{x:Nat}. x.x) {x=1,y=2,z=3}$

(* Casos con aplicaciones *)$
(L f:{x:Nat,y:Nat}->{x:Nat,y:Nat}. f {x=1,y=2}) (L x:{x:Nat,y:Nat}. {x=x.x,y=x.x})
(* Tipado basico *)$
(*(L f:{x:Nat,y:Nat}->{x:Nat,y:Nat}. f {x=1,y=2}) (L x:{x:Nat,y:Nat,z:Nat}. {x=x.x,y=x.x})
 Falla *)$
(*(L f:{x:Nat,y:Nat}->{x:Nat,y:Nat}. f {x=1,y=2}) (L x:{x:Nat,y:Nat}. {x=x.x})
 Falla *)$
(L f:{x:Nat,y:Nat}->{x:Nat,y:Nat}. f {x=1,y=2}) (L x:{x:Nat}. {x=x.x,y=x.x})
(* Bien *)$
(L f:{x:Nat,y:Nat}->{x:Nat,y:Nat}. f {x=1,y=2}) (L x:{x:Nat,y:Nat}. {x=x.x,y=x.x,z=x.x})
(* Bien *)$
(L f:{x:Nat,y:Nat}->{x:Nat,y:Nat}. f {x=1,y=2}) (L x:{x:Nat}. {x=x.x,y=x.x,z=x.x})
(* Bien *)$
